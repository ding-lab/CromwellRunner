#!/bin/bash

# Matthew Wyczalkowski <m.wyczalkowski@wustl.edu>
# https://dinglab.wustl.edu/

read -r -d '' USAGE <<'EOF'
Usage: runplan [options] [RUN_NAME1 [ RUN_NAME2 ... ]]
  Create YAML configuration files

Options:
-h: print usage information
-d: Print debug information about YAML processing
-1: Quit after evaluating one case
-y YAMLD: output directory of YAML files.  If "-", write YAML to stdout.  Default: ./yaml
-P PARAMS: parameters file which holds varibles for substution in template.  Not read by this script but passed to PARAM_SCRIPT
-p PARAM_SCRIPT: path to executable which returns a list of key:value pairs 
   used to create configuration file from YAML_TEMPLATE.  Required
-g: Issue warnings rather than quitting for testing
-R RESTART_MAP: file listing case and workflow IDs for each case when restarting runs.  
-Y YAML_TEMPLATE: template file used to generate YAML configuration file for each template.  Required
-U RUN_LIST: file with lines composed of RUN_NAME, CASE_NAME, and one or more UUIDs corresponding to data to be
   processed.  Required.
# -r: remap paths /rdcw/ to /storage1/ - maybe a useful feature, not currently implemented

runplan uses BamMap, catalog, and parameters file to initialize runs.  Loops
over RUN_LIST to create per-run configuration files ("YAML" files)
Pipeline-specific details, including reading of parameters file, is delegated
to get_pipeline_parameters scripts, which provides variable substitution to
generate configuration files based on YAML_TEMPLATE.  Output YAML filename is YAMLD/RUN_NAME.yaml  
All paths in YAML output are tested to make sure they exist

If RUN_NAME1 is - then read RUN_NAME from STDIN.  If RUN_NAME1 is not defined,
read from first column of RUN_NAME file

Run-specific details, including CASE_NAME and UUID of input data, are obtained from RUN_LIST 
for a given RUN_NAME.  The contents of the matching line are then passed as input arguments to PARAM_SCRIPT,
which returns a list of key:value pairs used for populating YAML_TEMPLATE

Restarting of runs is supported by making available RESTART_D variable in YAML
template, which provides path to root directory of prior run.
RESTART_D="RESTART_ROOT/UUID", with RESTART_ROOT defined in PARAMS (mandatory),
and UUID obtained from RESTART_MAP file (TSV with CASE and UUID, `cq | cut -f 1-2` will work)

Remapping paths /rdcw/ to /storage1/ allows paths obtained with `readlink` on a compute1 client
to be used on cache layer machines.

Format of Catalog3 and BamMap3 is defined here: https://docs.google.com/document/d/1uSgle8jiIx9EnDFf_XHV3fWYKFElszNLkmGlht_CQGE/edit
EOF

source src/cromwell_utils.sh

SCRIPT=$(basename $0)

YAMLD="./yaml"
PARAMS="Project.config.sh"
PYTHON="/usr/bin/python"

while getopts ":hd1y:P:p:gR:Y:U:" opt; do
  case $opt in
    h)  
      echo "$USAGE"
      exit 0
      ;;
    d) 
      TP_DEBUG=1
      ;;
    1)  
      JUSTONE=1
      ;;
    y)  
      YAMLD="$OPTARG"
      ;;
    P)  
      PARAMS="$OPTARG"
      ;;
    p)  
      PARAM_SCRIPT="$OPTARG"
      ;;
    g) 
      ONLYWARN=1
      ;;
    R) 
      RESTART_MAP="$OPTARG"
      ;;
    Y) 
      YAML_TEMPLATE="$OPTARG"
      ;;
    U) 
      RUN_LIST="$OPTARG"
      ;;
#    r)
#      REMAP_PATHS=1
#      ;;
    \?)
      >&2 echo "Invalid option: -$OPTARG" 
      >&2 echo "$USAGE"
      exit 1
      ;;
    :)
      >&2 echo "Option -$OPTARG requires an argument." 
      >&2 echo "$USAGE"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

function complain {
    MSG="$1"
    WARN=$2
    if [ -z $WARN ]; then
        >&2 echo ERROR: $MSG
        exit 1
    else
        >&2 echo WARNING: $MSG  Continuing
    fi

}

function init_yaml {
    confirm $PARAMS $ONLYWARN

    if [ -z $YAML_TEMPLATE ]; then
        >&2 echo ERROR: YAML template not defined \(-Y\)
        >&2 echo "$USAGE"
        exit 1
    fi
    confirm $YAML_TEMPLATE $ONLYWARN

    if [ -z $PARAM_SCRIPT ]; then
        >&2 echo ERROR: PARAM_SCRIPT not defined \(-p\)
        >&2 echo "$USAGE"
        exit 1
    fi
    confirm $PARAM_SCRIPT $ONLYWARN

    if [ -z $RUN_LIST ]; then
        >&2 echo ERROR: RUN_LIST not defined \(-U\)
        >&2 echo "$USAGE"
        exit 1
    fi
    confirm $RUN_LIST $ONLYWARN

    if [ $YAMLD != "-" ]; then
        mkdir -p $YAMLD
        test_exit_status
    fi
}

# Create YAML configuration file in three steps:
# * get per-run parameters from RUN_LIST by matching by RUN_NAME
# * get key/value parameters by calling pipeline-specific PARAM_SCRIPT
# * New - create RESTART_D with RESTART_UUID from by matching RUN_NAME to RESTART_MAP
# * populate YAML_TEMPLATE by replacing "key" with "value" to generate YAML configuration file
function make_yaml {
    RUN_NAME=$1
    YAML_FN=$2

    if [ ! -z $RESTART_MAP ]; then
        RESTART_UUID=$(grep $RUN_NAME $RESTART_MAP | cut -f 2)
        RESTART_ARGS="-R $RESTART_UUID"
    fi
#    >&2 echo DEBUG: PARAM_KV = $PARAM_KV

    # find RUN_NAME in RUN_LIST; the matching line provides arguments to PARAM_SCRIPT
    SARGS=$(awk -v run_name=$RUN_NAME '{if ($1 == run_name) print}' $RUN_LIST)
    CMD="bash $PARAM_SCRIPT -P $PARAMS $RESTART_ARGS $SARGS"
    if [ "$TP_DEBUG" == 1 ]; then
        >&2 echo $SCRIPT Running: $CMD
        DARG="-d"
    fi
    
    PARAM_KV=$(eval $CMD)
    test_exit_status 


    if [ $YAML_FN != "-" ]; then
        OUT_ARG="-o $YAML_FN"
    else
        OUT_ARG=""
    fi

    CMD="$PYTHON src/TemplateParser.py $DARG $OUT_ARG -t $YAML_TEMPLATE $PARAM_KV"
    run_cmd "$CMD" 1
}


# this allows us to get run names in one of three ways:
# 1: runplan RUN_NAME1 RUN_NAME2 ...
# 2: cat RUN_LIST.dat | runplan -
# 3: read from RUN_LIST file
# Note that if no run names defined, assume RUN_NAME='-'
if [ "$#" == 0 ]; then
    confirm "$RUN_LIST" $ONLYWARN
    RUN_NAMES=$(cat $RUN_LIST | cut -f 1)
elif [ "$1" == "-" ] ; then
    RUN_NAMES=$(cat - )
else
    RUN_NAMES="$@"
fi

init_yaml

for L in $RUN_NAMES; do
    RUN_NAME=$(echo "$L" | cut -f 1)
    if [ $RUN_NAME == "run_name" ]; then
        continue
    fi

    >&2 echo Processing $RUN_NAME 

    if [ $YAMLD != "-" ]; then
        YAML_FN="$YAMLD/${RUN_NAME}.yaml"
    else
        YAML_FN="-"
    fi
    CMD="make_yaml $RUN_NAME $YAML_FN"
    echo Running: $CMD
    eval $CMD
    echo Complete


    # Now do a sanity check on written YAML files - make sure all files listed in it exist
    if [ $YAMLD != "-" ]; then
        SANITY=$(grep -v "#" $YAML_FN | grep path | cut -f 2 -d : | xargs ls -l 2>&1 >/dev/null)
    
        rcs=${PIPESTATUS[*]};
        for rc in ${rcs}; do
            if [[ $rc != 0 ]]; then
                if [ $ONLYWARN ]; then
                    >&2 echo WARNING: $YAML_FN has non-existing paths
                    >&2 echo "$SANITY"
                else 
                    >&2 echo ERROR: $YAML_FN has non-existing paths:
                    >&2 echo "$SANITY"
                    exit $rc
                fi
            fi;
        done
    fi

    if [ $JUSTONE ]; then
        >&2 echo Quitting after one
        break
    fi
done

