#!/bin/bash

# Matthew Wyczalkowski <m.wyczalkowski@wustl.edu>
# https://dinglab.wustl.edu/

read -r -d '' USAGE <<'EOF'
Usage: runplan [options] [CASE1 [ CASE2 ... ]]
  Review, initialize, and summarize runs

Options:
-h: print usage information
-v: Indicate progress in stderr
-d: Print debug information about YAML processing
-1: Quit after evaluating one case
-x TASK: Execute given task.  Values: 'query' (default), 'yaml', 'summary'
-y YAMLD: output directory of YAML files.  If "-", write YAML to stdout.  Default: ./yaml
-P PARAMS: parameters file which holds varibles for substution in template, read via `source $PARAMS`
-u: Print BAM UUIDs in query
-p: Print BAM paths in query
-n: Print BAM sample names in query
-w: Print additional details in query (REF_PATH, TD_ROOT, DBSNP_DB, VEP_CACHE_GZ).  Requires PARAMS 
-g: Issue warnings rather than quitting for testing
-s SUMMARY_OUT: output analysis summary file for task `summary`.  If '-', write to STDOUT
-c CROMWELL_QUERY: explicit path to cromwell query utility `cq`.  Default "cq" 
-R RESTART_MAP: file listing workflow IDs for each case when restarting runs.  Requires RESTART_ROOT in PARAMS
-U UUID_MAP: optional file listing tumor and normal UUIDs for each case.  This bypasses matching of BamMap by 
    case, sample type, experimental strategy, and reference.  TSV file with columns CASE, TUMOR_UUID, NORMAL_UUID

runplan uses BamMap and parameters file to review, initialize, and summarize completed runs.  This
script makes use of the PARAMS file (default Project.config.sh) to get various parameters

runplan performs the following tasks, specified with -x:
* `query`: return information about inputs to be used for generating YAML file.  This is the default task
  - Values returned are case, disease, tumor BAM, normal BAM, [optionaly RESTART_D, if specified ]
  - flags -u, -p, -n specify whether to write BAM as UUID, path, or sample name, respectively.
    These may be combined.  If not specified, -n is assumed
  - flag -w will print detailed information about inputs for YAML file
* `yaml`: Write YAML files ( typically ./yaml/CASE.yaml) contain inputs for each run, including paths to BAMs. 
* `summary`: Obtain run inputs and result data to generate an analysis summary file
  - Defined here: https://docs.google.com/document/d/1Ho5cygpxd8sB_45nJ90d15DcdaGCiDqF0_jzIcc-9B4/edit

If CASE is - then read CASE from STDIN.  If CASE is not defined, read from CASES_FN file.

Output YAML filename is CASE.yaml.  It is based on YAML_TEMPLATE, with the following variables substituted:
    * NORMAL_BAM
    * TUMOR_BAM
    * REF_PATH
    * RESTART_D
    * TUMOR_BARCODE
    * NORMAL_BARCODE
    * PARAM_ROOT            TD
    * DBSNP_DB              TD
    * VEP_CACHE_GZ          TD
    * VEP_CACHE_VERSION     TD
    * ASSEMBLY              TD
    * CHRLIST               TD
Source of info:
    * TD indicates parameters useful only for TinDaisy
    * TUMOR_BAM and NORMAL_BAM are defined by lookup of CASE in BamMap
    * RESTART_D is defined when -R flag is set
    * TUMOR_BARCODE and NORMAL_BARCODE are defined by lookup of UUID in Catalog file
    * Remainder defined in PARAMS file

Restarting of runs is supported by making available RESTART_D variable in YAML
template, which provides path to root directory of prior run.
RESTART_D="RESTART_ROOT/UUID", with RESTART_ROOT defined in PARAMS (mandatory),
and UUID obtained from RESTART_MAP file (TSV with CASE and UUID, `cq | cut -f 1-2` will work)

Format of BamMap is defined here: https://github.com/ding-lab/importGDC/blob/master/make_bam_map.sh
EOF

source src/cromwell_utils.sh

SCRIPT=$(basename $0)

TASK="query"
YAMLD="./yaml"
SUMMARY_OUT="./dat/analysis_summary.dat"
PARAMS="Project.config.sh"
CROMWELL_QUERY="src/cq"
PYTHON="/usr/bin/python"

TUMOR_ST='tumor'
NORMAL_ST='blood_normal'

while getopts ":hdv1P:x:y:upnwgs:c:R:U:" opt; do
  case $opt in
    h)  
      echo "$USAGE"
      exit 0
      ;;
    v) 
      PROGRESS=1
      ;;
    d) 
      TP_DEBUG=1
      ;;
    1)  
      JUSTONE=1
      ;;
    P)  
      PARAMS="$OPTARG"
      ;;
    x)  
      TASK="$OPTARG"
      ;;
    y)  
      YAMLD="$OPTARG"
      ;;
    u) 
      BAM_UUID=1
      ;;
    p) 
      BAM_PATH=1
      ;;
    n) 
      BAM_SN=1
      ;;
    w) 
      QUERY_DETAIL=1
      ;;
    g) 
      ONLYWARN=1
      ;;
    s)  
      SUMMARY_OUT="$OPTARG"
      ;;
    c) 
      CROMWELL_QUERY="$OPTARG"
      ;;
    R) 
      RESTART_MAP="$OPTARG"
      ;;
    U) 
      UUID_MAP="$OPTARG"
      confirm $UUID_MAP
      ;;
    \?)
      >&2 echo "Invalid option: -$OPTARG" 
      >&2 echo "$USAGE"
      exit 1
      ;;
    :)
      >&2 echo "Option -$OPTARG requires an argument." 
      >&2 echo "$USAGE"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

function complain {
    MSG="$1"
    WARN=$2
    if [ -z $WARN ]; then
        >&2 echo ERROR: $MSG
        exit 1
    else
        >&2 echo WARNING: $MSG  Continuing
    fi

}

# init_params reads PARAMS and fills in several variables used for BamMap queries
# Parameters processed here are not passed to TemplateParser.py directly
function init_params_common {
    if [ -z $PARAMS ]; then
        >&2 echo ERROR: Parameter file  not defined \(-p\)
        >&2 echo "$USAGE"
        exit 1
    fi
    confirm $PARAMS $ONLYWARN

    source $PARAMS

    # These parameters used to be passed as arguments, but are now in PARAMS
    if [ -z $BAMMAP ]; then
        complain "BAMMAP not defined in $PARAMS" $ONLYWARN
        BAMMAP="undefined"
    else
        confirm $BAMMAP $ONLYWARN
    fi
    if [ -z $CASES_FN ]; then
        complain "CASES_FN not defined in $PARAMS" $ONLYWARN
        $CASES_FN="undefined"
    else
        confirm $CASES_FN $ONLYWARN
    fi
    if [ -z $YAML_TEMPLATE ]; then
        complain "YAML_TEMPLATE not defined in $PARAMS" $ONLYWARN
        YAML_TEMPLATE="undefined"
    else
        confirm $YAML_TEMPLATE $ONLYWARN
    fi

    # the parameters below, also required, are used for matching BamMap
    if [ -z $ES ]; then
        complain "ES not defined in $PARAMS" $ONLYWARN
        ES="undefined"
    fi
    if [ -z $TUMOR_ST ]; then
        complain "TUMOR_ST not defined in $PARAMS" $ONLYWARN
        TUMOR_ST="undefined"
    fi
    if [ -z $NORMAL_ST ]; then
        complain "NORMAL_ST not defined in $PARAMS" $ONLYWARN
        NORMAL_ST="undefined"
    fi
    if [ -z $REF_NAME ]; then
        complain "REF_NAME not defined in $PARAMS" $ONLYWARN
        REF_NAME="undefined"
    fi

}

# PARAMS should already have been read
# go through and set BATCH_PARAMS_KV for each parameter which has been defined.
# Note that some of these may not be applicable to different workflows, but any
# error checking about missing parameters will take place in TemplateParser.py
#
# Note adding additional kv parameters will require modifications to this function, 
# an annoyance that may need to be addressed in the future
function init_params_kv {

    BATCH_PARAM_KV=""
    if [ ! -z $REF_PATH ]; then   
        BATCH_PARAM_KV="$BATCH_PARAM_KV REF_PATH:$REF_PATH"
    fi
    if [ ! -z $PARAM_ROOT ]; then
        BARCH_PARAM_KV="$BATCH_PARAM_KV PARAM_ROOT:$PARAM_ROOT"
    fi
    if [ -z $DBSNP_DB ]; then
        BARCH_PARAM_KV="$BATCH_PARAM_KV DBSNP_DB:$DBSNP_DB"
    fi
    if [ -z $VEP_CACHE_GZ ]; then
        BARCH_PARAM_KV="$BATCH_PARAM_KV VEP_CACHE_GZ:$VEP_CACHE_GZ"
    fi
    if [ -z $VEP_CACHE_VERSION ]; then
        BARCH_PARAM_KV="$BATCH_PARAM_KV VEP_CACHE_VERSION:$VEP_CACHE_VERSION"
    fi
    if [ -z $ASSEMBLY ]; then
        BARCH_PARAM_KV="$BATCH_PARAM_KV ASSEMBLY:$ASSEMBLY"
    fi
    if [ -z $CHRLIST ]; then
        BARCH_PARAM_KV="$BATCH_PARAM_KV CHRLIST:$CHRLIST"
    fi
}

# Goal of kv parameter parsing is to build up a string PARAM_KV consisting of "key1:value1" pairs, e.g.,
# PARAM_KV="TUMOR_BAM:/path/to/file NORMAL_BAM:/path/to/file ..."
# such a string consists of parameters common to the entire batch and those specific to a particular case
init_params_common
init_params_kv


# this allows us to get case names in one of three ways:
# 1: cq CASE1 CASE2 ...
# 2: cat cases.dat | cq -
# 3: read from CASES_FN file
# Note that if no cases defined, assume CASE='-'
if [ "$#" == 0 ]; then
    confirm "$CASES_FN" $ONLYWARN
    CASES=$(cat $CASES_FN)
elif [ "$1" == "-" ] ; then
    CASES=$(cat - )
else
    CASES="$@"
fi

# Usage:
#   get_BAM CASE ST
# searches for entries with
#   experimental strategy = WGS, WXS, RNA-Seq, etc
#   sample type = as given by ST
#   case = as given by CASE
# Alternatively, if sample type is a UUID, search BamMap for this UUID
# Returns "BAM_path sample_name UUID Disease"
function get_BAM {
    CASE=$1
    ST=$2
    # BAMMAP, ES, REF_NAME  as global

    # BamMap columns
    #     1  sample_name
    #     2  case
    #     3  disease
    #     4  experimental_strategy
    #     5  sample_type
    #     6  data_path
    #     7  filesize
    #     8  data_format
    #     9  reference
    #    10  UUID
    #    11  system

    # Evaluate if ST is a UUID.  If it is, then just grep the BamMap for this value
    # From https://stackoverflow.com/questions/38416602/check-if-string-is-uuid
    if [[ $ST =~ ^\{?[A-F0-9a-f]{8}-[A-F0-9a-f]{4}-[A-F0-9a-f]{4}-[A-F0-9a-f]{4}-[A-F0-9a-f]{12}\}?$ ]]; then
        LINE_A=$(grep $ST $BAMMAP)
    else
        LINE_A=$(awk -v c=$CASE -v ref=$REF_NAME -v es=$ES -v st=$ST 'BEGIN{FS="\t";OFS="\t"}{if ($2 == c && $4 == es && $5 == st && $9 == ref) print}' $BAMMAP)
    fi

    if [ -z "$LINE_A" ]; then
        if [ $ONLYWARN ]; then
            >&2 echo WARNING: $REF_NAME $CASE $ES $ST sample not found in $BAMMAP
        else
            >&2 echo ERROR: $REF_NAME $CASE $ES $ST sample not found in $BAMMAP
            exit 1
        fi
    elif [ $(echo "$LINE_A" | wc -l) != "1" ]; then
        if [ $ONLYWARN ]; then
            >&2 echo WARNING: $REF_NAME $CASE $ES $ST sample has multiple matches in $BAMMAP
            >&2 echo We will choose the first match.  Please review YAML file carefully
            LINE_A=$(echo "$LINE_A" | head -n 1)
        else
            >&2 echo ERROR: $REF_NAME $CASE $ES $ST sample has multiple matches in $BAMMAP
            >&2 echo Not making assumptions about which to choose, YAML will need to be created manually
            exit 1
        fi
    fi

    # Sample Name and UUID will be needed for analysis summary
    SN=$(echo "$LINE_A" | cut -f 1)
    DIS=$(echo "$LINE_A" | cut -f 3)
    BAM=$(echo "$LINE_A" | cut -f 6)
    UUID=$(echo "$LINE_A" | cut -f 10)

    printf "$BAM\t$SN\t$UUID\t$DIS"
}

# Obtain aliquot name associated with given UUID from Catalog file
#  Catalog files come from here: https://github.com/ding-lab/CPTAC3.catalog
#  and aliquot names are column 6
# TODO: allow aliquot names to be obtained even if Catalog file does not exist
#  An option is pass a fake catalog file with two columns, UUID and Aliquot, and 
#  check here how many columns the catalog file has.
function get_aliquot {
    UUID=$1
    CATALOG=$2
#$ header CPTAC3.Catalog.dat
#     1  # sample_name
#     2  case
#     3  disease
#     4  experimental_strategy
#     5  short_sample_type
#     6  aliquot
#     7  filename
#     8  filesize
#     9  data_format
#    10  result_type
#    11  UUID
#    12  MD5
#    13  reference
#    14  sample_type

    LINE_A=$(grep $UUID $CATALOG)
    if [ -z "$LINE_A" ]; then
        if [ $ONLYWARN ]; then
            >&2 echo WARNING: UUID $UUID not found in $CATALOG
        else
            >&2 echo ERROR: UUID $UUID not found in $CATALOG
            exit 1
        fi
    elif [ $(echo "$LINE_A" | wc -l) != "1" ]; then
        if [ $ONLYWARN ]; then
            >&2 echo WARNING: UUID $UUID has multiple matches in $CATALOG
            >&2 echo We will choose the first match.  Please review YAML file carefully
            LINE_A=$(echo "$LINE_A" | head -n 1)
        else
            >&2 echo ERROR: UUID $UUID has multiple matches in $CATALOG
            >&2 echo Not making assumptions about which to choose, YAML will need to be created manually
            exit 1
        fi
    fi
    ALIQUOT=$(echo "$LINE_A" | cut -f 6)
    printf "$ALIQUOT"
}

# Returns base directory of prior run and confirms it exists
# Error if CASE does not appear in RESTART_MAP exactly once
function get_restartd {
    CASE=$1
    RESTART_MAP=$2

    UUID=$(grep $CASE $RESTART_MAP | cut -f 2)

    if [ -z "$UUID" ]; then
        if [ $ONLYWARN ]; then
            >&2 echo WARNING: $CASE not found in $RESTART_MAP
        else
            >&2 echo ERROR: $CASE not found in $RESTART_MAP
            exit 1
        fi
    elif [ $(echo "$UUID" | wc -l) != "1" ]; then
        if [ $ONLYWARN ]; then
            >&2 echo WARNING: $CASE sample has multiple matches in $RESTART_MAP
            >&2 echo We will choose the first match.  Please review YAML file carefully
            LINE_A=$(echo "$LINE_A" | head -n 1)
        else
            >&2 echo ERROR: $CASE sample has multiple matches in $RESTART_MAP
            >&2 echo Not making assumptions about which to choose, YAML will need to be created manually
            exit 1
        fi
    fi

    RESTART_D="$RESTART_ROOT/$UUID"
    if [ ! -s $RESTART_D ]; then
        if [ $ONLYWARN ]; then
            >&2 echo WARNING: $RESTART_D is not an existing directory.  Continuing
        else
            >&2 echo ERROR: $RESTART_D is not an existing directory
            exit 1
        fi
    fi

    printf "$RESTART_D"
}


function init_yaml {
    if [ -z $YAML_TEMPLATE ]; then
        >&2 echo ERROR: YAML template not defined \(-Y\)
        >&2 echo "$USAGE"
        exit 1
    fi
    confirm $YAML_TEMPLATE $ONLYWARN

    if [ $YAMLD != "-" ]; then
        mkdir -p $YAMLD
        test_exit_status
    fi
}

function get_tumor {
    if [ -z $UUID_MAP ]; then
        # we get details about tumor, normal samples from BamMap for every case
        TUMOR=$(get_BAM $CASE $TUMOR_ST)
        test_exit_status
    else
        TUMOR_UUID=$(grep $CASE $UUID_MAP | cut -f 2)
        test_exit_status
        TUMOR=$(get_BAM $CASE $TUMOR_UUID)
        test_exit_status
    fi
    echo "$TUMOR"
}

function get_normal {
    if [ -z $UUID_MAP ]; then
        # we get details about tumor, normal samples from BamMap for every case
        NORMAL=$(get_BAM $CASE $NORMAL_ST)
        test_exit_status
    else
        NORMAL_UUID=$(grep $CASE $UUID_MAP | cut -f 3)
        test_exit_status
        NORMAL=$(get_BAM $CASE $NORMAL_UUID)
        test_exit_status
    fi
    echo "$NORMAL"
}

function do_yaml {
    CASE=$1
    YAML_FN=$2

    TUMOR=$(get_tumor $CASE)
    test_exit_status

    NORMAL=$(get_normal $CASE)
    test_exit_status

    # TUMOR and NORMAL look like this: "BAM_path sample_name UUID Disease"

    TUMOR_BAM=$(echo "$TUMOR" | cut -f 1)
    NORMAL_BAM=$(echo "$NORMAL" | cut -f 1)

    PARAM_KV="$BATCH_PARAM_KV TUMOR_BAM:$TUMOR_BAM NORMAL_BAM:$NORMAL_BAM"

    # If RESTART_MAP is defined, get RESTART_D as RESTART_ROOT/UUID
    if [ ! -z $RESTART_MAP ]; then
        RESTART_D=$(get_restartd $CASE $RESTART_MAP)
        test_exit_status
        PARAM_KV="$PARAM_KV RESTART_D:$RESTART_D"
    fi

    # Get barcode for tumor and normal
    # If $CATALOG is defined, obtain NORMAL_BARCODE and _TUMOR based on aliquot column using lookup of UUID
    # if CATALOG not defined, NORMAL_BARCODE = NORMAL and TUMOR_BARCODE = TUMOR
    if [ ! -z $CATALOG ]; then
        TUMOR_UUID=$(echo "$TUMOR" | cut -f 3)
        NORMAL_UUID=$(echo "$NORMAL" | cut -f 3)
        TUMOR_BARCODE=$(get_aliquot $TUMOR_UUID $CATALOG) 
        NORMAL_BARCODE=$(get_aliquot $NORMAL_UUID $CATALOG) 
    else
        TUMOR_BARCODE="TUMOR"
        NORMAL_BARCODE="NORMAL"
    fi
    # note that SomaticSV does not need barcodes, but it is not clear how to define this necessity
    PARAM_KV="$PARAM_KV TUMOR_BARCODE:$TUMOR_BARCODE NORMAL_BARCODE:$NORMAL_BARCODE"
        
    if [ $YAML_FN != "-" ]; then
        OUT_ARG="-o $YAML_FN"
    else
        OUT_ARG=""
    fi
    if [ "$TP_DEBUG" == 1 ]; then
        DARG="-d"
    fi

    CMD="$PYTHON src/TemplateParser.py $DARG $OUT_ARG -t $YAML_TEMPLATE $PARAM_KV"
    run_cmd "$CMD" 1
}

function init_summary {
# Summary prep and header written
    if [ -z $RESTART_MAP ]; then
        HEADER=$(printf "# case\tdisease\tresult_path\tfile_format\ttumor_name\ttumor_uuid\tnormal_name\tnormal_uuid\tcromwell_workflow_id\n") 
    else
        HEADER=$(printf "# case\tdisease\tresult_path\tfile_format\ttumor_name\ttumor_uuid\tnormal_name\tnormal_uuid\tcromwell_workflow_id\trestart_dir\n") 
    fi

    if [ $SUMMARY_OUT == "-" ]; then
        echo "$HEADER"
    else
        SD=$(dirname $SUMMARY_OUT)
        if [ ! -d $SD ]; then
            >&2 echo Making output directory for analysis summary: $SD
            mkdir -p $SD
            test_exit_status
        fi
        echo "$HEADER" > $SUMMARY_OUT
        test_exit_status
    fi 
}

# Implicitly, this is a summary which is valid only for workflows which take tumor + normal as input
function do_summary {
    CASE=$1

#    if [ -z $CWL_OUTPUT ]; then
#        >&2 echo ERROR: CWL_OUTPUT must be defined in parameters file
#        exit 1
#    fi

    TUMOR=$(get_tumor $CASE)
    test_exit_status

    NORMAL=$(get_normal $CASE)
    test_exit_status
    # TUMOR and NORMAL look like this: "BAM_path sample_name UUID Disease"

    # Evaluate only runs which have status Succeeded
    STATUS=$( $CROMWELL_QUERY -V -q status $CASE )
    test_exit_status
    if [ "$STATUS" != "Succeeded" ]; then
        if [ $ONLYWARN ]; then
            >&2 echo WARNING: $CASE status is $STATUS.  Continuing
        else
            >&2 echo Skipping $CASE because status = $STATUS
            return
        fi
    fi

    TUMOR_SN=$(echo "$TUMOR" | cut -f 2)
    TUMOR_UUID=$(echo "$TUMOR" | cut -f 3)
    NORMAL_SN=$(echo "$NORMAL" | cut -f 2)
    NORMAL_UUID=$(echo "$NORMAL" | cut -f 3)
    DIS=$(echo "$TUMOR" | cut -f 4)

#    RESULT_FILES=$($CROMWELL_QUERY -V -q outputs -W $CWL_OUTPUT $CASE)
    RESULT_FILES=$($CROMWELL_QUERY -V -q outputs $CASE)
    test_exit_status

    # Iterate over all result files - there may be more than one
    for RF in $RESULT_FILES; do

        confirm $RF $ONLYWARN  # complain if result file does not exist

        WID=` $CROMWELL_QUERY -V -q wid $CASE `
        test_exit_status

        # https://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash
        BASE="${RF##*/}"
        EXT="${BASE##*.}"
        if [ "$EXT" == "vcf" ]; then
            FILE_FORMAT="VCF"
        elif [ "$EXT" == "maf" ]; then
            FILE_FORMAT="VCF"
        else
            >&2 echo ERROR: Unknown file format $EXT
            exit 1
        fi

        # If RESTART_MAP is defined, get RESTART_D as RESTART_ROOT/UUID
        if [ ! -z $RESTART_MAP ]; then
            RESTART_D=$(get_restartd $CASE $RESTART_MAP)
            test_exit_status
            OUTLINE=$(printf "$CASE\t$DIS\t$RF\t$FILE_FORMAT\t$TUMOR_SN\t$TUMOR_UUID\t$NORMAL_SN\t$NORMAL_UUID\t$WID\t$RESTART_D\n" )
        else
            OUTLINE=$(printf "$CASE\t$DIS\t$RF\t$FILE_FORMAT\t$TUMOR_SN\t$TUMOR_UUID\t$NORMAL_SN\t$NORMAL_UUID\t$WID\n" )
        fi

        if [ $SUMMARY_OUT == "-" ]; then
            echo "$OUTLINE"
        else
            echo "$OUTLINE" >> $SUMMARY_OUT
            test_exit_status
        fi 
    done
}

function init_query {
    # Default query BAM output is sample name, if nothing else is defined
    if [ -z "$BAM_UUID" ] && [ -z "$BAM_PATH" ] && [ -z "$BAM_SN" ] ; then
        BAM_SN=1
    fi
}

function do_query {
# Write: case, disease, tumor BAM, normal BAM
# If QUERY_DETAIL, write all relevant details
    CASE=$1

    TUMOR=$(get_tumor $CASE)
    test_exit_status

    NORMAL=$(get_normal $CASE)
    test_exit_status
    # TUMOR and NORMAL look like this: "BAM_path sample_name UUID Disease"

    TUMOR_BAM=$(echo "$TUMOR" | cut -f 1)
    TUMOR_SN=$(echo "$TUMOR" | cut -f 2)
    TUMOR_UUID=$(echo "$TUMOR" | cut -f 3)
    DIS=$(echo "$TUMOR" | cut -f 4)

    NORMAL_BAM=$(echo "$NORMAL" | cut -f 1)
    NORMAL_SN=$(echo "$NORMAL" | cut -f 2)
    NORMAL_UUID=$(echo "$NORMAL" | cut -f 3)

    TUMOR_INFO=""
    NORMAL_INFO=""
    if [ "$BAM_SN" ]; then
        TUMOR_INFO="$TUMOR_SN"
        NORMAL_INFO="$NORMAL_SN"
    fi
    if [ "$BAM_UUID" ]; then
        if [ -z $TUMOR_INFO ]; then
            TUMOR_INFO="$TUMOR_UUID"
            NORMAL_INFO="$NORMAL_UUID"
        else
            TUMOR_INFO="$TUMOR_INFO\t$TUMOR_UUID"
            NORMAL_INFO="$NORMAL_INFO\t$NORMAL_UUID"
        fi
    fi
    if [ "$BAM_PATH" ]; then
        if [ -z $TUMOR_INFO ]; then
            TUMOR_INFO="$TUMOR_BAM"
            NORMAL_INFO="$NORMAL_BAM"
        else
            TUMOR_INFO="$TUMOR_INFO\t$TUMOR_BAM"
            NORMAL_INFO="$NORMAL_INFO\t$NORMAL_BAM"
        fi
    fi

    # If RESTART_MAP is defined, append $RESTART_D
    if [ ! -z $RESTART_MAP ]; then
        RESTART_D=$(get_restartd $CASE $RESTART_MAP)
        test_exit_status
        SUFFIX="\t$RESTART_D" 
    fi

    # Spit out additional details if user requests
    if [ "$QUERY_DETAIL" ]; then
        printf "$CASE\t$DIS\t$TUMOR_INFO\t$NORMAL_INFO\t$REF_PATH\t$TD_ROOT\t$DBSNP_DB\t${VEP_CACHE_GZ}${SUFFIX}\n"
    else
        printf "$CASE\t$DIS\t$TUMOR_INFO\t${NORMAL_INFO}${SUFFIX}\n" 
    fi
}

# Note init_params has already been called
# If RESTART_MAP is defined,
# confirm it exists and confirm RESTART_ROOT is defined
if [ ! -z $RESTART_MAP ]; then
    confirm $RESTART_MAP $ONLYWARN
    >&2 echo Restart mapping from $RESTART_MAP
    if [ -z $RESTART_ROOT ]; then
        >&2 echo ERROR: RESTART_ROOT not defined in $PARAMS
        exit 1
    fi
fi

# Initialize and check for valid task name
if [ $TASK == "query" ]; then
    init_query 
elif [ $TASK == "yaml" ]; then
    init_yaml
elif [ $TASK == "summary" ]; then
    init_summary
else
    >&2 echo ERROR: Unknown task $TASK 
    >&2 echo "$USAGE"
    exit 1
fi

for CASE in $CASES; do
    if [ "$PROGRESS" ]; then
        >&2 echo Processing $CASE 
    fi

# this goes into called functions
    if [ $TASK == "query" ]; then
        do_query $CASE 
    elif [ $TASK == "yaml" ]; then

        if [ $YAMLD != "-" ]; then
            YAML_FN="$YAMLD/$CASE.yaml"
        else
            YAML_FN="-"
        fi
        do_yaml $CASE $YAML_FN

        # Now do a sanity check on YAML files - make sure all files listed in it exist
        SANITY=$(grep -v "#" $YAML_FN | grep path | cut -f 2 -d : | xargs ls -l 2>&1 >/dev/null)
        
        rcs=${PIPESTATUS[*]};
        for rc in ${rcs}; do
            if [[ $rc != 0 ]]; then
                if [ $ONLYWARN ]; then
                    >&2 echo WARNING: $YAML_FN has non-existing paths
                    >&2 echo "$SANITY"
                else 
                    >&2 echo ERROR: $YAML_FN has non-existing paths:
                    >&2 echo "$SANITY"
                    exit $rc;
                fi
            fi;
        done

    elif [ $TASK == "summary" ]; then
        do_summary $CASE 
    fi

    if [ $JUSTONE ]; then
        >&2 echo Quitting after one
        break
    fi
done

if [ $TASK == "summary" ]; then
    if [ $SUMMARY_OUT != "-" ]; then
        >&2 echo Written to $SUMMARY_OUT
    fi
fi
